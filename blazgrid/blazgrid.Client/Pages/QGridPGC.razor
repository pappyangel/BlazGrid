@page "/qgridPGC"
@rendermode InteractiveAuto
@inject QDataService myBogusGridData


<style>
    ::deep th.country-name {
        width: 14rem;
    }

    /* Subtle stripe effect */
    ::deep tr:nth-child(even) {
        background: rgba(255, 255, 255, 0.4);
    }

    /* Don't collapse rows even if they are empty */
    ::deep tbody tr {
        height: 1.8rem;
    }

    /* Style the custom page links*/
    .page-buttons {
        margin: 1rem 0;
        align-items: center;
    }

    .page-buttons button {
        background: #d6d7d8;
        color: black;
        padding: 0.25rem 0.75rem;
        border-radius: 0.4rem;
        transition: transform 0.3s ease-out;
        margin: 0.25rem;
    }

    .page-buttons button:active {
        background: #a7c1ff !important;
        color: white;
        transform: scale(0.95) translateY(-0.15rem);
        transition-duration: 0.05s;
    }

    .page-buttons button:hover:not(.current) {
        background: #c0c9dc;
    }

    .page-buttons button.current {
        background: #3771f4;
        color: white;
    }
</style>


<div class="grid">
    <QuickGrid Items="@itemsQueryable" Pagination="@pagination">       
        <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.StartDate)" Format="yyyy-MM-dd" Sortable="true" />    
    </QuickGrid>
</div>

<div class="page-buttons">
    Page:
    @if (pagination.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex;
            <button @onclick="@(() => GoToPageAsync(capturedIndex))" class="@PageButtonClass(capturedIndex)"
                aria-current="@AriaCurrentValue(capturedIndex)" aria-label="Go to page @(pageIndex + 1)">
                @(pageIndex + 1)
            </button>
        }
    }
</div>


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<PersonClass>? itemsQueryable;

    protected override void OnInitialized()
    {
        itemsQueryable =  myBogusGridData.GetPeople(500,1000);
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "page" : null;

}


